// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using feedme.Server.Data;

#nullable disable

namespace feedme.Server.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251010025458_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("feedme.Server.Models.CatalogItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<string>("AlcoholCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("alcohol_code");

                    b.Property<double>("AlcoholStrength")
                        .HasColumnType("double precision")
                        .HasColumnName("alcohol_strength");

                    b.Property<double>("AlcoholVolume")
                        .HasColumnType("double precision")
                        .HasColumnName("alcohol_volume");

                    b.Property<string>("Allergens")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("allergens");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("code");

                    b.Property<double>("CostEstimate")
                        .HasColumnType("double precision")
                        .HasColumnName("cost_estimate");

                    b.Property<int>("DeliveryTime")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_time");

                    b.Property<bool>("IsAlcohol")
                        .HasColumnType("boolean")
                        .HasColumnName("is_alcohol");

                    b.Property<bool>("IsMarked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_marked");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<bool>("PackagingRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("packaging_required");

                    b.Property<double>("SalePrice")
                        .HasColumnType("double precision")
                        .HasColumnName("sale_price");

                    b.Property<bool>("SpoilsAfterOpening")
                        .HasColumnType("boolean")
                        .HasColumnName("spoils_after_opening");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("supplier");

                    b.Property<string>("TaxRate")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("tax_rate");

                    b.Property<string>("Tnved")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("tnved");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("type");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("unit");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("unit_price");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<string>("WriteoffMethod")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("writeoff_method");

                    b.HasKey("Id");

                    b.ToTable("catalog_items", (string)null);
                });

            modelBuilder.Entity("feedme.Server.Models.Receipt", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("id");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("number");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_at");

                    b.Property<string>("Responsible")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("responsible");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("supplier");

                    b.Property<string>("Warehouse")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("warehouse");

                    b.HasKey("Id");

                    b.ToTable("receipts", (string)null);
                });

            modelBuilder.Entity("feedme.Server.Models.Receipt", b =>
                {
                    b.OwnsMany("feedme.Server.Models.ReceiptLine", "Items", b1 =>
                        {
                            b1.Property<string>("receipt_id")
                                .HasMaxLength(36)
                                .HasColumnType("character varying(36)")
                                .HasColumnName("receipt_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("CatalogItemId")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("catalog_item_id");

                            b1.Property<string>("Category")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("category");

                            b1.Property<DateTime?>("ExpiryDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("expiry_date");

                            b1.Property<string>("ItemName")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("item_name");

                            b1.Property<decimal>("Quantity")
                                .HasPrecision(18, 4)
                                .HasColumnType("numeric(18,4)")
                                .HasColumnName("quantity");

                            b1.Property<string>("Sku")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("sku");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("status");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("unit");

                            b1.Property<decimal>("UnitPrice")
                                .HasPrecision(18, 4)
                                .HasColumnType("numeric(18,4)")
                                .HasColumnName("unit_price");

                            b1.HasKey("receipt_id", "Id");

                            b1.HasIndex("receipt_id");

                            b1.ToTable("receipt_lines", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("receipt_id");
                        });

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
